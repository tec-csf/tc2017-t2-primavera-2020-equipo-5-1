/**
 * This file is part of {{ tc2017-t2-primavera-2020-equipo-5-1 }}.
 *
 * Developed for Diseño, Análisis de Algoritmos
 * This product includes software developed by the LSST Project
 * (https://www.lsst.org).
 * See the COPYRIGHT file at the top-level directory of this distribution
 * for details of code ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
#include <algorithm>
#include <iostream>
#include <stdio.h>
#include <ctime>
#include <chrono>
//#include <bits/stdc++.h> //incluir si es necesario
#include <queue>

using namespace std::chrono;
using namespace std;

template <class T>
class AVLnode {
public:
    T key;
    int balance;
    AVLnode *left, *right, *parent;

    AVLnode(T k, AVLnode* p)
        : key(k)
        , balance(0)
        , parent(p)
        , left(NULL)
        , right(NULL)
    {
    }

    ~AVLnode()
    {
        delete left;
        delete right;
    }
};

/**
*
* AVL tree
* Method that creates the AVL tree and balaced acordingly
**/
template <class T>
class AVLtree {
public:
    AVLtree(void);
    ~AVLtree(void);
    bool insert(T key);
    void deleteKey(const T key);
    void printBalance();

private:
    AVLnode<T>* root;

    AVLnode<T>* rotateLeft(AVLnode<T>* a);
    AVLnode<T>* rotateRight(AVLnode<T>* a);
    AVLnode<T>* rotateLeftThenRight(AVLnode<T>* n);
    AVLnode<T>* rotateRightThenLeft(AVLnode<T>* n);
    void rebalance(AVLnode<T>* n);
    int height(AVLnode<T>* n);
    void setBalance(AVLnode<T>* n);
    void printBalance(AVLnode<T>* n);
    void clearNode(AVLnode<T>* n);
};

/*
*
* AVL class definition
*
**/

template <class T>
void AVLtree<T>::rebalance(AVLnode<T>* n)
{
    setBalance(n);

    if (n->balance == -2) {
        if (height(n->left->left) >= height(n->left->right))
            n = rotateRight(n);
        else
            n = rotateLeftThenRight(n);
    }
    else if (n->balance == 2) {
        if (height(n->right->right) >= height(n->right->left))
            n = rotateLeft(n);
        else
            n = rotateRightThenLeft(n);
    }

    if (n->parent != NULL) {
        rebalance(n->parent);
    }
    else {
        root = n;
    }
}

template <class T>
AVLnode<T>* AVLtree<T>::rotateLeft(AVLnode<T>* a)
{
    AVLnode<T>* b = a->right;
    b->parent = a->parent;
    a->right = b->left;

    if (a->right != NULL)
        a->right->parent = a;

    b->left = a;
    a->parent = b;

    if (b->parent != NULL) {
        if (b->parent->right == a) {
            b->parent->right = b;
        }
        else {
            b->parent->left = b;
        }
    }

    setBalance(a);
    setBalance(b);
    return b;
}

template <class T>
AVLnode<T>* AVLtree<T>::rotateRight(AVLnode<T>* a)
{
    AVLnode<T>* b = a->left;
    b->parent = a->parent;
    a->left = b->right;

    if (a->left != NULL)
        a->left->parent = a;

    b->right = a;
    a->parent = b;

    if (b->parent != NULL) {
        if (b->parent->right == a) {
            b->parent->right = b;
        }
        else {
            b->parent->left = b;
        }
    }

    setBalance(a);
    setBalance(b);
    return b;
}

template <class T>
AVLnode<T>* AVLtree<T>::rotateLeftThenRight(AVLnode<T>* n)
{
    n->left = rotateLeft(n->left);
    return rotateRight(n);
}

template <class T>
AVLnode<T>* AVLtree<T>::rotateRightThenLeft(AVLnode<T>* n)
{
    n->right = rotateRight(n->right);
    return rotateLeft(n);
}

template <class T>
int AVLtree<T>::height(AVLnode<T>* n)
{
    if (n == NULL)
        return -1;
    return 1 + max(height(n->left), height(n->right));
}

template <class T>
void AVLtree<T>::setBalance(AVLnode<T>* n)
{
    n->balance = height(n->right) - height(n->left);
}

template <class T>
void AVLtree<T>::printBalance(AVLnode<T>* n)
{
    if (n != NULL) {
        printBalance(n->left);
        cout << n->balance << " ";
        printBalance(n->right);
    }
}

template <class T>
AVLtree<T>::AVLtree(void)
    : root(NULL)
{
}

template <class T>
AVLtree<T>::~AVLtree(void)
{
    delete root;
}

template <class T>
bool AVLtree<T>::insert(T key)
{
    if (root == NULL) {
        root = new AVLnode<T>(key, NULL);
    }
    else {
        AVLnode<T>
            *n = root,
            *parent;

        while (true) {
            if (n->key == key)
                return false;

            parent = n;

            bool goLeft = n->key > key;
            n = goLeft ? n->left : n->right;

            if (n == NULL) {
                if (goLeft) {
                    parent->left = new AVLnode<T>(key, parent);
                }
                else {
                    parent->right = new AVLnode<T>(key, parent);
                }

                rebalance(parent);
                break;
            }
        }
    }

    return true;
}

template <class T>
void AVLtree<T>::deleteKey(const T delKey)
{
    if (root == NULL)
        return;

    AVLnode<T>
        *n = root,
        *parent = root,
        *delNode = NULL,
        *child = root;

    while (child != NULL) {
        parent = n;
        n = child;
        child = delKey >= n->key ? n->right : n->left;
        if (delKey == n->key)
            delNode = n;
    }

    if (delNode != NULL) {
        delNode->key = n->key;

        child = n->left != NULL ? n->left : n->right;

        if (root->key == delKey) {
            root = child;
        }
        else {
            if (parent->left == n) {
                parent->left = child;
            }
            else {
                parent->right = child;
            }

            rebalance(parent);
        }
    }
}

/**
*
* Clase para la impresion del balance y el arreglo de forma acendente y decendente
*
**/


template <class T>
void AVLtree<T>::printBalance()
{
    printBalance(root);
    cout << endl;
}

void Ascendente(int arr[], int tamArreglo)
{
    srand((unsigned)time(0));

    auto start = high_resolution_clock::now();
    
    sort(arr, arr + tamArreglo);

    cout << "El arreglo en orden ascendente es " << endl;

    for (int i = 0; i < tamArreglo; ++i) {
        cout << arr[i] << " ";
    }

    cout << "\n";
    
    auto stop = high_resolution_clock::now();

    auto durationSeg = duration_cast<seconds>(stop - start);
    auto durationMilli = duration_cast<milliseconds>(stop - start);
    auto durationMicro = duration_cast<microseconds>(stop - start);

    cout << "\n";

    cout << "Le tomo " << durationSeg.count() << " segundos\n";
    cout << "Le tomo " << durationMilli.count() << " milisegundos\n";
    cout << "Le tomo " << durationMicro.count() << " microsegundos\n";

    cout << "\n";
};

void Descendente(int arr[], int tamArreglo)
{
    
    srand((unsigned)time(0));

    auto start = high_resolution_clock::now();

    sort(arr, arr + tamArreglo, greater<>());

    cout << "El arreglo en orden decendente es " << endl;

    for (int i = 0; i < tamArreglo; ++i) {
        cout << arr[i] << " ";
    }

    cout << "\n";
    
    auto stop = high_resolution_clock::now();

    auto durationSeg = duration_cast<seconds>(stop - start);
    auto durationMilli = duration_cast<milliseconds>(stop - start);
    auto durationMicro = duration_cast<microseconds>(stop - start);

    cout << "\n";

    cout << "Le tomo " << durationSeg.count() << " segundos\n";
    cout << "Le tomo " << durationMilli.count() << " milisegundos\n";
    cout << "Le tomo " << durationMicro.count() << " microsegundos\n";

    cout << "\n";
    
};

/**
 *
 *Arreglo de busqueda de numemros dentro del arreglo
 *
 */

void Buscar(int arr[], int tamArreglo, int valPerd)
{
    
    srand((unsigned)time(0));

    auto start = high_resolution_clock::now();

    sort(arr, arr + tamArreglo);

    bool res = false;
    int i = 0;

    while (i < tamArreglo && res != true) {
        if (arr[i] == valPerd) {

            res = true;
        }
        else {

            i++;
        }
    }

    if (arr[i] == valPerd) {
        cout << "El valor " << valPerd << " si se encuentra en el árbol" << '\n';
    }
    else {

        cout << "El valor " << valPerd << " no se encuentra en el árbol" << '\n';
    }

    cout << "\n" << '\n';
    
    auto stop = high_resolution_clock::now();

    auto durationSeg = duration_cast<seconds>(stop - start);
    auto durationMilli = duration_cast<milliseconds>(stop - start);
    auto durationMicro = duration_cast<microseconds>(stop - start);

    cout << "\n";

    cout << "Le tomo " << durationSeg.count() << " segundos\n";
    cout << "Le tomo " << durationMilli.count() << " milisegundos\n";
    cout << "Le tomo " << durationMicro.count() << " microsegundos\n";

    cout << "\n";
};

/**
* inicio del main
*/

int main()
{
    AVLtree<int> t;

    int tamArreglo, delVal, cant, newVal, tamRand, opcion, buscado, tamArregloB;

    tamRand = 10; // inserta el tamaño del random
    tamArreglo = 10; // inserta el tamaño de la poblacion de numeros en el arbol

    tamArregloB = 10;

        tamArreglo = tamArreglo * 2;

    int arr[tamArreglo];

        int arrBuscable[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };// numeros que quieres que busque, no son random pero es lo mismo.

        srand((unsigned)time(0));

    auto start = high_resolution_clock::now();

    for (int cont = 0; cont < tamArreglo; cont++) {

        arr[cont] = (rand() % tamRand) + 1;
    }

    int n = sizeof(arr) / sizeof(arr[0]);

    for (size_t i = 0; i < tamArreglo; i++) {
        t.insert(arr[i++]);
    }

        
    //t.printBalance(); // imprime el balance del arbol, no es necesario
    
    // Opcion para añadir nuevos numeros
    //##########################################################
        cout << "\n" << '\n';
    cout << "Cuántos valores deseas añadir?" << endl;
    cin >> cant;
    cout << "\n";
    if (cant == 1) {
        for (int i = 0; i < cant; i++) {
            cout << "Inserta un valor" << '\n';
            cin >> newVal;
            cout << "\n";
            t.insert(newVal);
        }
    }
    for (int i = 0; i < cant; i++) {
        cout << "Inserta un valor" << '\n';
        cin >> newVal;
        cout << "\n";
        t.insert(newVal);
    }
    //#############################################################
    
    // Opcion para borrar numeros
    //#############################################################
        cout << "\n" << '\n';
    cout << "Cuántos valores deseas borrar?" << endl;
    cin >> cant;
    cout << "\n";
    if (cant == 1) {
        for (int i = 0; i < cant; i++) {
            cout << "Inserta el valor que se va a borrar" << '\n';
            cin >> delVal;
            cout << "\n";
            //root = deleteNode(root, delVal);
        }
    }
    for (int i = 0; i < cant; i++) {
        cout << "Inserta el valor que se va a borrar" << '\n';
        cin >> delVal;
        cout << "\n";
        //deleteKey(root, delVal);
    }
    //#############################################################
        cout << "\n" << '\n';
    cout << "\n" << '\n';
    Ascendente(arr, tamArreglo);
        cout << "\n" << '\n';
    Descendente(arr, tamArreglo);
        

        cout << "\n" << '\n';

        for (int i = 0; i < tamArregloB; i++) {

        int valPerd = arrBuscable[i];

        cout << valPerd << endl;

        Buscar(arr, tamArreglo, valPerd);
    }

    cout << "\n";

    auto stop = high_resolution_clock::now();

    auto durationSeg = duration_cast<seconds>(stop - start);
    auto durationMilli = duration_cast<milliseconds>(stop - start);
    auto durationMicro = duration_cast<microseconds>(stop - start);

    cout << "\n";
    
    cout << "Esto tomo correr todo el programa: \n";

    cout << "Le tomo " << durationSeg.count() << " segundos\n";
    cout << "Le tomo " << durationMilli.count() << " milisegundos\n";
    cout << "Le tomo " << durationMicro.count() << " microsegundos\n";

    cout << "\n";

    return 0;
}

